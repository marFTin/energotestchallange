cmake_minimum_required(VERSION 3.10.3)

# outputs
SET( EXECUTABLES_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET( LIBRARY_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Outputs directories
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${LIBRARY_DIRECTORY}" )
# Executables
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${EXECUTABLES_DIRECTORY}" )
# DLL
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY "${LIBRARY_DIRECTORY}" )


ENABLE_TESTING()

#FIND_PACKAGE(Qt5 COMPONENTS Widgets Core REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Sql REQUIRED)
FIND_PACKAGE(Qt5Network REQUIRED)

# compiler
INCLUDE_DIRECTORIES(include)


INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Sql_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Sql_EXECUTABLE_COMPILE_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Network_EXECUTABLE_COMPILE_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTOUIC ON)


ADD_SUBDIRECTORY(src)

# unit tests
ADD_SUBDIRECTORY(test)

INSTALL()
ADD_CUSTOM_TARGET( uninstall COMMAND xargs rm < ${CMAKE_CURRENT_BINARY_DIR}/install_manifest.txt )